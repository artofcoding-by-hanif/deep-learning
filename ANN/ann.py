# -*- coding: utf-8 -*-
"""ANN.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1UiRAbYAc4iWHtbMZNUD_sxqsnCU6LAUa
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

dataset = pd.read_csv('sample_data/Churn_Modelling.csv')
dataset.head()

### Divide as dependend and independent features

X = dataset.iloc[:, 3:13]
y = dataset.iloc[:, 13]
y.head()

### Feature Engineering

geography = pd.get_dummies(X['Geography'], drop_first=True, dtype=int)
gender = pd.get_dummies(X['Gender'], drop_first=True, dtype=int)

X = X.drop(['Geography', 'Gender'], axis=1)
X.head()

pd.concat([X, geography, gender], axis=1)

### Splitting to train and test

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=0)

X_train.shape

### Feature Scaling : Features of your dataset are transformed to fall within a specific range or to have specific statistical properties.

from sklearn.preprocessing import StandardScaler
sc = StandardScaler()
X_train = sc.fit_transform(X_train)
X_test = sc.transform(X_test)

from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense
from tensorflow.keras.layers import LeakyReLU, PReLU, ELU, ReLU
from tensorflow.keras.layers import Dropout

classifier = Sequential()

### Adding the input layer

classifier.add(Dense(units=8, activation='relu'))

### Hidden layer

classifier.add(Dense(units=6, activation='relu'))
classifier.add(Dropout(rate=0.3))

### Hidden layer

classifier.add(Dense(units=5, activation='relu'))
classifier.add(Dropout(rate=0.2))

### Adding the output Layer
classifier.add(Dense(units=1, activation='sigmoid'))

classifier.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])

import tensorflow
opt = tensorflow.keras.optimizers.Adam(learning_rate=0.01)

### Early Stopping

import tensorflow as tf

early_stopping = tf.keras.callbacks.EarlyStopping(
    monitor="val_loss",
    min_delta=0,
    patience=0,
    verbose=1,
    mode="auto",
    baseline=None,
    restore_best_weights=False,
    start_from_epoch=0,
)

model_history = classifier.fit(X_train,
                               y_train,
                               validation_split=0.33, batch_size=10, epochs=1000,
                               callbacks=early_stopping)

model_history.history.keys()

### Making the predictions and evaluating the model

y_pred = classifier.predict(X_test)
y_pred = (y_pred >= 0.5)
y_pred

### make the confusion matrix

from sklearn.metrics import confusion_matrix
cm = confusion_matrix(y_test, y_pred)
cm

### Calculate the accuracy

from sklearn.metrics import accuracy_score
score = accuracy_score(y_pred, y_test)
score